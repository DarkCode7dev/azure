parameters:
- name: environment


  
 
stages:
- stage: TerraformInitAndPlan
  displayName: Terraform Init And Plan
  jobs: 
  - job: TerraformInitAndPlan
    displayName: Terraform Init And Plan
    steps:

    # - task: tfsec@1
    #   inputs:
    #     version: 'v1.26.0'
    #     dir: '$(WORK_DIR)'
    
    - task: CmdLine@2
      displayName: 'tflint'
      inputs:
        script: 'tflint --chdir=$(System.DefaultWorkingDirectory)/modules/LinuxVirtualMachine --format junit > tflint_results.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/modules/LinuxVirtualMachine'
       
    - task: PublishTestResults@2
      condition: Always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '$(System.DefaultWorkingDirectory)/modules/LinuxVirtualMachine/tflint_results.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/modules/LinuxVirtualMachine'
        testRunTitle: 'tflint'

    - task: CmdLine@2
      displayName: 'checkov'
      inputs:
        script: 'checkov -d . -o junitxml --output-file-path $(System.DefaultWorkingDirectory)/results.xml'
        workingDirectory: '$(System.DefaultWorkingDirectory)/modules/LinuxVirtualMachine'   

    - task: PublishTestResults@2
      condition: Always()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'results.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/modules/LinuxVirtualMachine' 
        testRunTitle: 'checkov'
#     - task: TerraformTaskV4@4
#       displayName: 'Terraform init'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(WORK_DIR)'
#         commandOptions: '-upgrade'
#         backendServiceArm: 'devconnection'
#         backendAzureRmResourceGroupName: 'BigBadDeves'
#         backendAzureRmStorageAccountName: 'bigstorageacc'
#         backendAzureRmContainerName: 'bloby'
#         backendAzureRmKey: '${{ parameters.environment }}.terraform.tfstate'

#     - task: TerraformTaskV4@4
#       displayName: 'Terraform Plan'
#       inputs:
#         provider: 'azurerm'
#         command: 'plan'
#         workingDirectory: '$(WORK_DIR)'
#         commandOptions: '--var-file=${{ parameters.environment }}.terraform.tfvars'
#         environmentServiceNameAzureRM: 'DaddysHome'
         
# - stage: ValidationAndTerraformApply
#   displayName: Validation And TerraformApply
#   condition: and(succeeded(), eq(variables['Build.SourceBranchName'],'main'))
#   jobs:
#   - job: ManualValidation
#     pool: server
#     steps:
#     - task: ManualValidation@1
#       inputs:
#         notifyUsers: abc@abc.com 
#         timeoutInMinutes: 1
#   - job: TerraformApply
#     dependsOn: ManualValidation
#     steps:
#     - task: TerraformTaskV4@4
#       displayName: 'Terraform init'
#       inputs:
#         provider: 'azurerm'
#         command: 'init'
#         workingDirectory: '$(WORK_DIR)'
#         commandOptions: '-upgrade'
#         backendServiceArm: 'hope'
#         backendAzureRmResourceGroupName: 'BigBadDeves'
#         backendAzureRmStorageAccountName: 'bigstorageacc'
#         backendAzureRmContainerName: 'bloby'
#         backendAzureRmKey: '${{ parameters.environment }}.terraform.tfvars'
#     - task: TerraformTaskV4@4
#       inputs:
#         provider: 'azurerm'
#         command: 'apply'
#         workingDirectory: '$(WORK_DIR)'
#         commandOptions: '--var-file=${{ parameters.environment }}.terraform.tfvars'
#         environmentServiceNameAzureRM: 'DaddysHome'



